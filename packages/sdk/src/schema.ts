/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find all categories */
        get: operations["findAllCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/creators/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find many creators */
        get: operations["findManyCreators"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/creators/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Count creators */
        get: operations["countCreators"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/creators/{creatorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find creator by id */
        get: operations["findCreatorById"];
        /** Update creator info */
        put: operations["updateCreatorInfo"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/creators/{creatorId}/assign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assign creator to user */
        post: operations["assignCreatorToUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/creators/crawl-extra-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Crawl extra info */
        post: operations["crawlExtraInfo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/creators/export-excel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Export excel */
        post: operations["exportExcel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/creators/{creatorId}/contact-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update creator contact info */
        put: operations["updateCreatorContactInfo"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/creators/crawl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Crawl creator by username */
        post: operations["crawlCreatorByUsername"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/creators/migrate-all-pics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Migrate all pics from one user to another */
        post: operations["migrateAllPics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/creators-findings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find all creators findings */
        get: operations["findAllCreatorsFindings"];
        put?: never;
        /** Create a creators finding */
        post: operations["createCreatorsFinding"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/creators-findings/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find a creators finding by id */
        get: operations["findCreatorsFindingById"];
        put?: never;
        post?: never;
        /** Delete a creators finding */
        delete: operations["deleteCreatorsFinding"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/draft-creators/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find many draft creators */
        get: operations["findManyDraftCreators"];
        put?: never;
        /** Create a new draft creator */
        post: operations["createDraftCreator"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/draft-creators/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Count draft creators */
        get: operations["countDraftCreators"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/draft-creators/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get draft creator by ID */
        get: operations["getDraftCreatorById"];
        /** Update a draft creator */
        put: operations["updateDraftCreator"];
        post?: never;
        /** Delete a draft creator */
        delete: operations["deleteDraftCreator"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/draft-creators/export-excel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Export draft creators to Excel */
        post: operations["exportDraftCreatorsExcel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/draft-creators/migrate-all-pics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Migrate all draft creator pics from one user to another */
        post: operations["migrateDraftCreatorAllPics"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/upload-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create upload URL */
        post: operations["createUploadUrl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check */
        get: operations["health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find many products */
        get: operations["findManyProducts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Count products */
        get: operations["countProducts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/search-image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search products by image */
        post: operations["searchProductsByImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/search-text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search products by text */
        post: operations["searchProductsByText"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/recommend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Recommend products */
        post: operations["recommendProducts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{productId}/add-to-bookmark": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a product to bookmark */
        post: operations["addToBookmark"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{productId}/remove-from-bookmark": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove a product from bookmark */
        post: operations["removeFromBookmark"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/bookmarks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user bookmarked products */
        get: operations["getUserBookmarks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/bookmarks/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Count user bookmarked products */
        get: operations["countUserBookmarks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/ranking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get product ranking */
        get: operations["getProductRanking"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get product by id */
        get: operations["getProductById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product-requests/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find many product requests */
        get: operations["findManyProductRequests"];
        put?: never;
        /** Request a new product */
        post: operations["requestProduct"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product-requests/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Count product requests */
        get: operations["countProductRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product-requests/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a product request */
        put: operations["updateProductRequest"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product-requests/export-excel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Export product requests to Excel */
        post: operations["exportProductRequestsExcel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product-sample-requests/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find many product sample requests */
        get: operations["findManyProductSampleRequests"];
        put?: never;
        /** Request a product sample */
        post: operations["requestProductSample"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product-sample-requests/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Count product sample requests */
        get: operations["countProductSampleRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/product-sample-requests/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a product sample request */
        put: operations["updateProductSampleRequest"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ADMIN - Find many jobs */
        get: operations["findManyJobs"];
        put?: never;
        /** Create a job */
        post: operations["createJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get job details by id */
        get: operations["getJobById"];
        /** Update a job */
        put: operations["updateJob"];
        post?: never;
        /** Delete a job */
        delete: operations["deleteJob"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Count jobs */
        get: operations["countJobs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{id}/applicants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List applicants of a job */
        get: operations["listJobApplicants"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{id}/applicants/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Count applicants of a job */
        get: operations["countJobApplicants"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{id}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List comments of a job */
        get: operations["listJobComments"];
        put?: never;
        /** Create a comment for a job */
        post: operations["createJobComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{id}/comments/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Count comments of a job */
        get: operations["countJobComments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{id}/comments/{commentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a comment of a job */
        delete: operations["deleteJobComment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{id}/applicants/{applicationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Revoke a job application */
        delete: operations["revokeJobApplication"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/job-applications/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Apply to a job */
        post: operations["applyJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/job-applications/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Cancel a job application status */
        put: operations["cancelJobApplication"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/job-applications/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** ADMIN - Update a job application status */
        put: operations["updateJobApplication"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sellers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find many sellers */
        get: operations["findManySellers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sellers/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Count sellers */
        get: operations["countSellers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/short-links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find many short links */
        get: operations["findManyShortLinks"];
        put?: never;
        /** Create a new short link */
        post: operations["createShortLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/short-links/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get short link by slug */
        get: operations["getShortLinkBySlug"];
        /** Update short link */
        put: operations["updateShortLink"];
        post?: never;
        /** Delete short link */
        delete: operations["deleteShortLink"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/short-links/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Count short links */
        get: operations["countShortLinks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rewards/daily-checkin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User daily check-in to get reward points */
        post: operations["dailyCheckin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rewards/daily-checkins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List daily check-ins of current user */
        get: operations["listDailyCheckins"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rewards/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get my total reward points */
        get: operations["getMyReward"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blogs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List blogs */
        get: operations["findManyBlogs"];
        put?: never;
        /** Create blog */
        post: operations["createBlog"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blogs/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Count blogs */
        get: operations["countBlogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blogs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get blog detail */
        get: operations["getBlogById"];
        /** Update blog */
        put: operations["updateBlog"];
        post?: never;
        /** Delete blog */
        delete: operations["deleteBlog"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blogs/{id}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List blog comments */
        get: operations["listBlogComments"];
        put?: never;
        /** Create blog comment */
        post: operations["createBlogComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blogs/{id}/comments/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Count blog comments */
        get: operations["countBlogComments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blogs/{id}/comments/{commentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete blog comment */
        delete: operations["deleteBlogComment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List tags */
        get: operations["findManyTags"];
        put?: never;
        /** Create tag */
        post: operations["createTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Count tags */
        get: operations["countTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get tag detail */
        get: operations["getTagById"];
        /** Update tag */
        put: operations["updateTag"];
        post?: never;
        /** Delete tag */
        delete: operations["deleteTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List users with filters */
        get: operations["listUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Count users with filters */
        get: operations["countUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete user */
        post: operations["deleteUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me/set-tiktok-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set TikTok info */
        post: operations["setTiktokInfo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/verify-tiktok-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify TikTok user */
        post: operations["verifyTiktokUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List events */
        get: operations["findManyEvents"];
        put?: never;
        /** Create event */
        post: operations["createEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Count events */
        get: operations["countEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get event detail */
        get: operations["getEventById"];
        /** Update event */
        put: operations["updateEvent"];
        post?: never;
        /** Delete event */
        delete: operations["deleteEvent"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        Category: {
            id: string;
            name: string;
            parentId: string | null;
            nameKey: string | null;
            level: number | null;
            isLeaf: boolean | null;
            createdAt: string;
            updatedAt: string;
        };
        Error: {
            statusCode: number;
            code: string;
            error: string;
            message: string;
        };
        Creator: {
            id: string;
            socialUserId: string | null;
            username: string;
            nickname: string;
            avatarUrl: string;
            followerCount: number;
            isFastGrowing: boolean;
            unitsSold: number | null;
            gmv: number | null;
            videoGmv: number | null;
            liveGmv: number | null;
            videoMedViewCount: number | null;
            liveMedViewCount: number | null;
            email: string | null;
            zalo: string | null;
            address: string | null;
            assignedUserId: string | null;
            /** @enum {string|null} */
            collabType: "BOOKING" | "FREECAST" | "MCN" | "OTHER" | null;
            tiktokUserId: string | null;
            note: string | null;
            name: string | null;
            createdAt: string;
            updatedAt: string;
        };
        MigrateAllPicsInput: {
            fromUserId: string;
            toUserId: string;
        };
        CreateCreatorsFindingInput: {
            name: string;
            description: string;
            /** @enum {string} */
            algorithm: "RELEVANCY" | "GMV" | "UNITS_SOLD" | "FOLLOWER" | "AVG_VIDEO_VIEWS";
            filterParams: {
                /** @enum {string} */
                avgCommissionGroup?: "LESS_THAN_5" | "LESS_THAN_10" | "LESS_THAN_15" | "LESS_THAN_20";
                categoryList?: {
                    stringList: string[];
                }[];
                /** @enum {string} */
                contentLabel?: "VIDEO" | "LIVE";
                followerFilter: {
                    leftBound: number;
                    rightBound: number;
                };
                isFastGrowing?: boolean;
                /** @enum {string} */
                managedByAgency?: "MANAGED_BY_AGENCY" | "INDEPENDENT_CREATORS";
                followerAgeGroups?: ("AGE_18_24" | "AGE_25_34" | "AGE_35_44" | "AGE_45_54" | "AGE_55_PLUS")[];
                genderFilter?: {
                    /** @enum {string} */
                    gender: "MALE" | "FEMALE";
                    percentage: number;
                };
                gmvGroupV2?: ("GMV_0_50K" | "GMV_50K_100K" | "GMV_100K_500K" | "GMV_500K_1M" | "GMV_1M_PLUS")[];
                unitsSoldGroup?: ("SOLD_0_10" | "SOLD_10_100" | "SOLD_100_1K" | "SOLD_1K_PLUS")[];
                videoAvgViews?: {
                    leftBound: number;
                    rightBound: number;
                };
                ecVideoAvgViews?: {
                    leftBound: number;
                    rightBound: number;
                };
                liveAvgViews?: {
                    leftBound: number;
                    rightBound: number;
                };
                ecLiveAvgViews?: {
                    leftBound: number;
                    rightBound: number;
                };
                videoAvgEngagement?: {
                    leftBound: number;
                    rightBound: number;
                };
                ecVideoAvgEngagement?: {
                    leftBound: number;
                    rightBound: number;
                };
                brandIds?: string[];
            };
        };
        CreatorsFinding: {
            id: string;
            /** @enum {string} */
            status: "CRAWLING" | "COMPLETED";
            name: string;
            description: string;
            /** @enum {string} */
            algorithm: "RELEVANCY" | "GMV" | "UNITS_SOLD" | "FOLLOWER" | "AVG_VIDEO_VIEWS";
            filterParams: {
                /** @enum {string} */
                avgCommissionGroup?: "LESS_THAN_5" | "LESS_THAN_10" | "LESS_THAN_15" | "LESS_THAN_20";
                categoryList?: {
                    stringList: string[];
                }[];
                /** @enum {string} */
                contentLabel?: "VIDEO" | "LIVE";
                followerFilter: {
                    leftBound: number;
                    rightBound: number;
                };
                isFastGrowing?: boolean;
                /** @enum {string} */
                managedByAgency?: "MANAGED_BY_AGENCY" | "INDEPENDENT_CREATORS";
                followerAgeGroups?: ("AGE_18_24" | "AGE_25_34" | "AGE_35_44" | "AGE_45_54" | "AGE_55_PLUS")[];
                genderFilter?: {
                    /** @enum {string} */
                    gender: "MALE" | "FEMALE";
                    percentage: number;
                };
                gmvGroupV2?: ("GMV_0_50K" | "GMV_50K_100K" | "GMV_100K_500K" | "GMV_500K_1M" | "GMV_1M_PLUS")[];
                unitsSoldGroup?: ("SOLD_0_10" | "SOLD_10_100" | "SOLD_100_1K" | "SOLD_1K_PLUS")[];
                videoAvgViews?: {
                    leftBound: number;
                    rightBound: number;
                };
                ecVideoAvgViews?: {
                    leftBound: number;
                    rightBound: number;
                };
                liveAvgViews?: {
                    leftBound: number;
                    rightBound: number;
                };
                ecLiveAvgViews?: {
                    leftBound: number;
                    rightBound: number;
                };
                videoAvgEngagement?: {
                    leftBound: number;
                    rightBound: number;
                };
                ecVideoAvgEngagement?: {
                    leftBound: number;
                    rightBound: number;
                };
                brandIds?: string[];
            };
            createdAt: string;
            updatedAt: string;
        };
        DraftCreator: {
            id: string;
            /** @enum {string|null} */
            collabType?: "BOOKING" | "FREECAST" | "MCN" | "OTHER" | null;
            tiktokUsername: string;
            tiktokUserId: string | null;
            name: string;
            email: string | null;
            phoneNumber: string | null;
            address: string | null;
            note: string | null;
            picUserId: string | null;
            createdAt: string;
            updatedAt: string;
        };
        DraftCreatorWithRelations: {
            picUser: components["schemas"]["User"] | null;
            categories: components["schemas"]["Category"][];
        } & components["schemas"]["DraftCreator"];
        User: {
            id: string;
            name: string;
            email: string;
            emailVerified: boolean;
            image: string | null;
            createdAt: string;
            updatedAt: string;
            role: string | null;
            banned: boolean | null;
            banReason: string | null;
            banExpires: string | null;
            tiktokId: string | null;
            tiktokVerified: boolean | null;
            tiktokCreatorId: string | null;
            tiktokUsername: string | null;
            contactEmail: string | null;
            zalo: string | null;
            address: string | null;
        };
        CreateDraftCreatorInput: {
            /** @enum {string} */
            collabType: "BOOKING" | "FREECAST" | "MCN" | "OTHER";
            tiktokUsername: string;
            tiktokUserId?: string;
            name: string;
            email?: string | null;
            phoneNumber?: string | null;
            address?: string | null;
            note?: string | null;
            picUserId?: string | null;
            categoryIds?: string[];
        };
        UpdateDraftCreatorInput: {
            /** @enum {string} */
            collabType?: "BOOKING" | "FREECAST" | "MCN" | "OTHER";
            tiktokUsername?: string;
            tiktokUserId?: string | null;
            name?: string;
            email?: string | null;
            phoneNumber?: string | null;
            address?: string | null;
            note?: string | null;
            picUserId?: string | null;
            categoryIds?: string[];
        };
        Product: {
            id: string;
            /** Format: uuid */
            searchId: string;
            isAvailable: boolean;
            planCommissionRate: number;
            totalCommissionRate: number;
            baseAffiliateUrl: string | null;
            name: string;
            minPrice: number;
            maxPrice: number | null;
            soldCount: number;
            rating: number;
            reviewCount: number;
            imageUrls: string[];
            mainImageUrl: string;
            descriptionSections: components["schemas"]["DescriptionSections"];
            isTrending: boolean;
            isTopSelling: boolean;
            categoryId: string;
            campaignId: string;
            sellerId: string;
            createdAt: string;
            updatedAt: string;
        };
        DescriptionSections: components["schemas"]["ProductDescriptionSection"][];
        ProductDescriptionSection: components["schemas"]["ProductDescriptionSectionText"] | components["schemas"]["ProductDescriptionSectionImage"] | components["schemas"]["ProductDescriptionSectionUl"];
        ProductDescriptionSectionText: {
            /** @constant */
            type: "text";
            text: string;
        };
        ProductDescriptionSectionImage: {
            /** @constant */
            type: "image";
            image: string;
        };
        ProductDescriptionSectionUl: {
            /** @constant */
            type: "ul";
            content: string[];
        };
        ProductWithRelations: {
            category: components["schemas"]["Category"];
            seller: components["schemas"]["Seller"];
            campaign: components["schemas"]["Campaign"];
        } & components["schemas"]["Product"];
        Seller: {
            id: string;
            name: string;
            code: string;
            avatarUrl: string | null;
            productCount: number;
            score: number | null;
            createdAt: string;
            updatedAt: string;
        };
        Campaign: {
            id: string;
            /** @enum {string} */
            status: "READY" | "UPCOMING" | "ONGOING" | "CLOSED";
            name: string;
            description: string;
            registrationStartTime: string;
            registrationEndTime: string;
            promotionStartTime: string;
            promotionEndTime: string;
            isActive: boolean;
            createdAt: string;
            updatedAt: string;
        };
        UserProductWithRelations: {
            id: string;
            userId: string;
            productId: string;
            createdAt: string;
            updatedAt: string;
            product: components["schemas"]["ProductWithRelations"];
        };
        ProductRequestWithRelations: {
            id: string;
            /** @enum {string} */
            status: "PENDING" | "APPROVED" | "REJECTED" | "COMPLETED" | "CANCELLED";
            productId: string;
            product: {
                name?: string;
                mainImageUrl?: string;
            };
            userId: string;
            createdAt: string;
            updatedAt: string;
            user: components["schemas"]["User"];
        };
        Job: {
            id: string;
            title: string;
            image: string | null;
            content: string;
            postedBy: string;
            /** @enum {string} */
            status: "DRAFT" | "PUBLISHED";
            expiredAt: string | null;
            salary: number | null;
            location: string | null;
            publishedAt: string | null;
            createdAt: string;
            updatedAt: string;
        };
        JobWithRelations: {
            postedByUser: components["schemas"]["User"];
            tags: {
                id: string;
                name: string;
            }[];
            /** @default 0 */
            applicantCount: number;
        } & components["schemas"]["Job"];
        /** @enum {string} */
        JobSortField: "title" | "status" | "expiredAt" | "salary" | "location" | "publishedAt" | "createdAt" | "updatedAt";
        JobUpdate: {
            title?: string;
            image?: string | null;
            content?: string;
            /** @enum {string} */
            status?: "DRAFT" | "PUBLISHED";
            expiredAt?: string | null;
            salary?: number | null;
            location?: string | null;
            publishedAt?: string | null;
            tagIds?: string[];
        };
        JobApplicationWithRelations: {
            id: string;
            jobId: string;
            applicantId: string;
            /** @enum {string} */
            status: "PENDING" | "APPROVED" | "REJECTED" | "CANCELLED" | "COMPLETED";
            appliedAt: string | null;
            createdAt: string;
            updatedAt: string;
            applicant: components["schemas"]["User"];
            job: components["schemas"]["Job"];
        };
        JobComment: {
            id: string;
            jobId: string;
            userId: string;
            content: string;
            createdAt: string;
            updatedAt: string;
        };
        JobCommentWithRelations: {
            user: components["schemas"]["User"];
        } & components["schemas"]["JobComment"];
        ShortLinkCreateInput: {
            slug?: string;
            title?: string | null;
            targetUrl: string;
            adsUrl: string;
            /** @default {} */
            metadata: {
                [key: string]: unknown;
            };
        };
        ShortLink: {
            slug: string;
            title: string | null;
            targetUrl: string;
            adsUrl: string;
            /** @default {} */
            metadata: {
                [key: string]: unknown;
            };
            userId: string;
            createdAt: string;
            updatedAt: string;
        };
        ShortLinkWithRelations: {
            user: components["schemas"]["User"];
        } & components["schemas"]["ShortLink"];
        ShortLinkUpdate: {
            title?: string | null;
            targetUrl?: string;
            adsUrl?: string;
            /** @default {} */
            metadata: {
                [key: string]: unknown;
            };
        };
        Blog: {
            id: string;
            userId: string;
            title: string;
            image: string | null;
            content: string;
            /** @enum {string} */
            status: "DRAFT" | "PUBLISHED";
            createdAt: string;
            updatedAt: string;
        };
        BlogWithRelations: {
            user: components["schemas"]["User"];
            tags: {
                id: string;
                name: string;
            }[];
        } & components["schemas"]["Blog"];
        /** @enum {string} */
        BlogSortField: "title" | "status" | "createdAt" | "updatedAt";
        BlogComment: {
            id: string;
            blogId: string;
            userId: string;
            content: string;
            createdAt: string;
            updatedAt: string;
        };
        BlogCommentWithUser: {
            user: components["schemas"]["User"];
        } & components["schemas"]["BlogComment"];
        BlogUpdate: {
            title?: string;
            image?: string | null;
            content?: string;
            /** @enum {string} */
            status?: "DRAFT" | "PUBLISHED";
            tagIds?: string[];
        };
        Tag: {
            id: string;
            name: string;
            type: string;
            createdAt: string;
            updatedAt: string;
        };
        TagInsert: {
            name: string;
            type?: string;
        };
        UserWithRelations: {
            creator: {
                id: string;
                socialUserId: string | null;
                username: string;
                nickname: string;
                avatarUrl: string;
                followerCount: number;
                isFastGrowing: boolean;
                unitsSold: number | null;
                gmv: number | null;
                videoGmv: number | null;
                liveGmv: number | null;
                videoMedViewCount: number | null;
                liveMedViewCount: number | null;
                email: string | null;
                zalo: string | null;
                address: string | null;
                assignedUserId: string | null;
                /** @enum {string|null} */
                collabType: "BOOKING" | "FREECAST" | "MCN" | "OTHER" | null;
                tiktokUserId: string | null;
                note: string | null;
                name: string | null;
                createdAt: string;
                updatedAt: string;
            } | null;
            pendingRequestsCount: number;
        } & components["schemas"]["User"];
        Event: {
            id: string;
            title: string;
            image: string | null;
            content: string;
            startDate: string;
            endDate: string | null;
            registrationLink: string | null;
            /** @enum {string} */
            status: "DRAFT" | "PUBLISHED";
            location: string | null;
            /** @enum {string|null} */
            eventMode: "ONLINE" | "OFFLINE" | null;
            creatorId: string;
            createdAt: string;
            updatedAt: string;
        };
        /** @enum {string} */
        EventSortField: "title" | "startDate" | "endDate" | "status" | "location" | "createdAt" | "updatedAt";
        EventUpdate: {
            title?: string;
            image?: string | null;
            content?: string;
            startDate?: string;
            endDate?: string | null;
            registrationLink?: string | null;
            /** @enum {string} */
            status?: "DRAFT" | "PUBLISHED";
            location?: string | null;
            /** @enum {string|null} */
            eventMode?: "ONLINE" | "OFFLINE" | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type SchemaCategory = components['schemas']['Category'];
export type SchemaError = components['schemas']['Error'];
export type SchemaCreator = components['schemas']['Creator'];
export type SchemaMigrateAllPicsInput = components['schemas']['MigrateAllPicsInput'];
export type SchemaCreateCreatorsFindingInput = components['schemas']['CreateCreatorsFindingInput'];
export type SchemaCreatorsFinding = components['schemas']['CreatorsFinding'];
export type SchemaDraftCreator = components['schemas']['DraftCreator'];
export type SchemaDraftCreatorWithRelations = components['schemas']['DraftCreatorWithRelations'];
export type SchemaUser = components['schemas']['User'];
export type SchemaCreateDraftCreatorInput = components['schemas']['CreateDraftCreatorInput'];
export type SchemaUpdateDraftCreatorInput = components['schemas']['UpdateDraftCreatorInput'];
export type SchemaProduct = components['schemas']['Product'];
export type SchemaDescriptionSections = components['schemas']['DescriptionSections'];
export type SchemaProductDescriptionSection = components['schemas']['ProductDescriptionSection'];
export type SchemaProductDescriptionSectionText = components['schemas']['ProductDescriptionSectionText'];
export type SchemaProductDescriptionSectionImage = components['schemas']['ProductDescriptionSectionImage'];
export type SchemaProductDescriptionSectionUl = components['schemas']['ProductDescriptionSectionUl'];
export type SchemaProductWithRelations = components['schemas']['ProductWithRelations'];
export type SchemaSeller = components['schemas']['Seller'];
export type SchemaCampaign = components['schemas']['Campaign'];
export type SchemaUserProductWithRelations = components['schemas']['UserProductWithRelations'];
export type SchemaProductRequestWithRelations = components['schemas']['ProductRequestWithRelations'];
export type SchemaJob = components['schemas']['Job'];
export type SchemaJobWithRelations = components['schemas']['JobWithRelations'];
export type SchemaJobSortField = components['schemas']['JobSortField'];
export type SchemaJobUpdate = components['schemas']['JobUpdate'];
export type SchemaJobApplicationWithRelations = components['schemas']['JobApplicationWithRelations'];
export type SchemaJobComment = components['schemas']['JobComment'];
export type SchemaJobCommentWithRelations = components['schemas']['JobCommentWithRelations'];
export type SchemaShortLinkCreateInput = components['schemas']['ShortLinkCreateInput'];
export type SchemaShortLink = components['schemas']['ShortLink'];
export type SchemaShortLinkWithRelations = components['schemas']['ShortLinkWithRelations'];
export type SchemaShortLinkUpdate = components['schemas']['ShortLinkUpdate'];
export type SchemaBlog = components['schemas']['Blog'];
export type SchemaBlogWithRelations = components['schemas']['BlogWithRelations'];
export type SchemaBlogSortField = components['schemas']['BlogSortField'];
export type SchemaBlogComment = components['schemas']['BlogComment'];
export type SchemaBlogCommentWithUser = components['schemas']['BlogCommentWithUser'];
export type SchemaBlogUpdate = components['schemas']['BlogUpdate'];
export type SchemaTag = components['schemas']['Tag'];
export type SchemaTagInsert = components['schemas']['TagInsert'];
export type SchemaUserWithRelations = components['schemas']['UserWithRelations'];
export type SchemaEvent = components['schemas']['Event'];
export type SchemaEventSortField = components['schemas']['EventSortField'];
export type SchemaEventUpdate = components['schemas']['EventUpdate'];
export type $defs = Record<string, never>;
export interface operations {
    findAllCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of categories */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findManyCreators: {
        parameters: {
            query?: {
                categoryIds?: string[];
                assignedUserId?: string;
                isFastGrowing?: boolean;
                keyword?: string;
                ids?: string[];
                creatorsFindingIds?: string[];
                sortBy?: "followerCount" | "unitsSold" | "gmv" | "videoGmv" | "liveGmv" | "videoMedViewCount" | "liveMedViewCount";
                sortDirection?: "ASC" | "DESC";
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Creator"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    countCreators: {
        parameters: {
            query?: {
                categoryIds?: string[];
                assignedUserId?: string;
                isFastGrowing?: boolean;
                keyword?: string;
                ids?: string[];
                creatorsFindingIds?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findCreatorById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                creatorId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Creator"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateCreatorInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                creatorId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    name?: string;
                    /** Format: email */
                    email?: string;
                    zalo?: string;
                    address?: string;
                    note?: string;
                    categoryIds?: string[];
                    /** @enum {string} */
                    collabType?: "BOOKING" | "FREECAST" | "MCN" | "OTHER";
                };
            };
        };
        responses: {
            /** @description Default Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    assignCreatorToUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                creatorId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    userId: string | null;
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    crawlExtraInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    creatorIds: string[];
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    exportExcel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    filter: {
                        categoryIds?: string[];
                        assignedUserId?: string;
                        isFastGrowing?: boolean;
                        keyword?: string;
                        ids?: string[];
                        creatorsFindingIds?: string[];
                    };
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        url: string;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateCreatorContactInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                creatorId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    zalo?: string | null;
                    email?: string | null;
                    address?: string | null;
                };
            };
        };
        responses: {
            /** @description Default Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    crawlCreatorByUsername: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    username: string;
                    name?: string;
                    /** Format: email */
                    email?: string;
                    zalo?: string;
                    address?: string;
                    note?: string;
                    categoryIds?: string[];
                    /** @enum {string} */
                    collabType?: "BOOKING" | "FREECAST" | "MCN" | "OTHER";
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    migrateAllPics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MigrateAllPicsInput"];
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findAllCreatorsFindings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatorsFinding"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createCreatorsFinding: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateCreatorsFindingInput"];
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatorsFinding"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findCreatorsFindingById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatorsFinding"] | null;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteCreatorsFinding: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never> | null;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findManyDraftCreators: {
        parameters: {
            query?: {
                collabType?: "BOOKING" | "FREECAST" | "MCN" | "OTHER";
                tiktokUsername?: string;
                tiktokUserId?: string;
                name?: string;
                email?: string;
                phoneNumber?: string;
                picUserId?: string;
                categoryIds?: string[];
                keyword?: string;
                ids?: string[];
                sortBy?: "name" | "tiktokUsername" | "collabType" | "createdAt" | "updatedAt";
                sortDirection?: "ASC" | "DESC";
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DraftCreatorWithRelations"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createDraftCreator: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Create a new draft creator */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateDraftCreatorInput"];
            };
        };
        responses: {
            /** @description Default Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DraftCreator"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    countDraftCreators: {
        parameters: {
            query?: {
                collabType?: "BOOKING" | "FREECAST" | "MCN" | "OTHER";
                tiktokUsername?: string;
                tiktokUserId?: string;
                name?: string;
                email?: string;
                phoneNumber?: string;
                picUserId?: string;
                categoryIds?: string[];
                keyword?: string;
                ids?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getDraftCreatorById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DraftCreatorWithRelations"] | null;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateDraftCreator: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description Update an existing draft creator */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateDraftCreatorInput"];
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DraftCreator"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteDraftCreator: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    exportDraftCreatorsExcel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    filter: {
                        /** @enum {string} */
                        collabType?: "BOOKING" | "FREECAST" | "MCN" | "OTHER";
                        tiktokUsername?: string;
                        tiktokUserId?: string;
                        name?: string;
                        email?: string;
                        phoneNumber?: string;
                        picUserId?: string;
                        categoryIds?: string[];
                        keyword?: string;
                        ids?: string[];
                    };
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        url: string;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    migrateDraftCreatorAllPics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MigrateAllPicsInput"];
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createUploadUrl: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Create upload URL */
        requestBody: {
            content: {
                "application/json": {
                    key: string;
                    contentType: string;
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        postURL: string;
                        formData: {
                            [key: string]: string;
                        };
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status: string;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findManyProducts: {
        parameters: {
            query?: {
                sellerId?: string;
                sortBy?: "minPrice" | "maxPrice" | "soldCount" | "rating" | "reviewCount" | "planCommissionRate" | "totalCommissionRate" | "createdAt" | "updatedAt";
                sortDirection?: "ASC" | "DESC";
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductWithRelations"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    countProducts: {
        parameters: {
            query?: {
                sellerId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    searchProductsByImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search products by image */
        requestBody: {
            content: {
                "application/json": {
                    imageUrl: string;
                };
            };
        };
        responses: {
            /** @description A list of products */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductWithRelations"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    searchProductsByText: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search products by text */
        requestBody: {
            content: {
                "application/json": {
                    text: string;
                };
            };
        };
        responses: {
            /** @description A list of products */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductWithRelations"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    recommendProducts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Recommend products */
        requestBody: {
            content: {
                "application/json": {
                    page: number;
                    positive: string[];
                    negative: string[];
                };
            };
        };
        responses: {
            /** @description A list of products */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductWithRelations"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    addToBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    removeFromBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getUserBookmarks: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProductWithRelations"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    countUserBookmarks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getProductRanking: {
        parameters: {
            query: {
                type: "BEST_SELLER" | "TOP_RATED" | "TRENDING";
                categoryIdLevelFirst?: string;
                categoryIdLevelSecond?: string;
                page: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        products: {
                            commission_rate: number;
                            cover_url: string;
                            earn_amount: string;
                            label?: {
                                text: string;
                                type: number;
                            }[];
                            metrics: string;
                            price: {
                                format_price: string;
                            };
                            product_id: string;
                            shop_info: {
                                seller_id: string;
                                shop_name: string;
                                shop_rating?: number;
                            };
                            title: string;
                        }[];
                        total: number;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getProductById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductWithRelations"] | null;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findManyProductRequests: {
        parameters: {
            query?: {
                userId?: string;
                productId?: string;
                status?: "PENDING" | "APPROVED" | "REJECTED" | "COMPLETED" | "CANCELLED";
                ids?: string[];
                sortBy?: "createdAt" | "updatedAt";
                sortDirection?: "ASC" | "DESC";
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductRequestWithRelations"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    requestProduct: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request a new product */
        requestBody: {
            content: {
                "application/json": {
                    productId: string;
                    /** @default {} */
                    product?: {
                        name?: string;
                        mainImageUrl?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        /** @enum {string} */
                        status: "PENDING" | "APPROVED" | "REJECTED" | "COMPLETED" | "CANCELLED";
                        productId: string;
                        product: {
                            name?: string;
                            mainImageUrl?: string;
                        };
                        userId: string;
                        createdAt: string;
                        updatedAt: string;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    countProductRequests: {
        parameters: {
            query?: {
                userId?: string;
                productId?: string;
                status?: "PENDING" | "APPROVED" | "REJECTED" | "COMPLETED" | "CANCELLED";
                ids?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateProductRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description Update an existing product request */
        requestBody?: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    status?: "PENDING" | "APPROVED" | "REJECTED" | "COMPLETED" | "CANCELLED";
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        /** @enum {string} */
                        status: "PENDING" | "APPROVED" | "REJECTED" | "COMPLETED" | "CANCELLED";
                        productId: string;
                        product: {
                            name?: string;
                            mainImageUrl?: string;
                        };
                        userId: string;
                        createdAt: string;
                        updatedAt: string;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    exportProductRequestsExcel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    filter: {
                        userId?: string;
                        productId?: string;
                        /** @enum {string} */
                        status?: "PENDING" | "APPROVED" | "REJECTED" | "COMPLETED" | "CANCELLED";
                        ids?: string[];
                    };
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        url: string;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findManyProductSampleRequests: {
        parameters: {
            query?: {
                userId?: string;
                productId?: string;
                status?: "PENDING" | "APPROVED" | "REJECTED" | "COMPLETED" | "CANCELLED";
                ids?: string[];
                sortBy?: "createdAt" | "updatedAt";
                sortDirection?: "ASC" | "DESC";
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        /** @enum {string} */
                        status: "PENDING" | "APPROVED" | "REJECTED" | "COMPLETED" | "CANCELLED";
                        productId: string;
                        userId: string;
                        createdAt: string;
                        updatedAt: string;
                        user: components["schemas"]["User"];
                        product: components["schemas"]["Product"];
                    }[];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    requestProductSample: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request a product sample */
        requestBody: {
            content: {
                "application/json": {
                    productId: string;
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        /** @enum {string} */
                        status: "PENDING" | "APPROVED" | "REJECTED" | "COMPLETED" | "CANCELLED";
                        productId: string;
                        userId: string;
                        createdAt: string;
                        updatedAt: string;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    countProductSampleRequests: {
        parameters: {
            query?: {
                userId?: string;
                productId?: string;
                status?: "PENDING" | "APPROVED" | "REJECTED" | "COMPLETED" | "CANCELLED";
                ids?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateProductSampleRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description Update an existing product sample request */
        requestBody?: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    status?: "PENDING" | "APPROVED" | "REJECTED" | "COMPLETED" | "CANCELLED";
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        /** @enum {string} */
                        status: "PENDING" | "APPROVED" | "REJECTED" | "COMPLETED" | "CANCELLED";
                        productId: string;
                        userId: string;
                        createdAt: string;
                        updatedAt: string;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findManyJobs: {
        parameters: {
            query?: {
                postedBy?: string;
                status?: "DRAFT" | "PUBLISHED";
                ids?: string[];
                title?: string;
                tagIds?: string[];
                page?: number;
                limit?: number;
                sortBy?: components["schemas"]["JobSortField"];
                sortDirection?: "ASC" | "DESC";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobWithRelations"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createJob: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Create a job */
        requestBody: {
            content: {
                "application/json": {
                    title: string;
                    image?: string | null;
                    content: string;
                    /** @enum {string} */
                    status?: "DRAFT" | "PUBLISHED";
                    expiredAt?: string | null;
                    salary?: number | null;
                    location?: string | null;
                    publishedAt?: string | null;
                    tagIds?: string[];
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Job"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getJobById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobWithRelations"] | null;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description Update a job */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["JobUpdate"];
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Job"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Job"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    countJobs: {
        parameters: {
            query?: {
                postedBy?: string;
                status?: "DRAFT" | "PUBLISHED";
                ids?: string[];
                title?: string;
                tagIds?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listJobApplicants: {
        parameters: {
            query?: {
                status?: "PENDING" | "APPROVED" | "REJECTED" | "CANCELLED" | "COMPLETED";
                sortBy?: "createdAt" | "updatedAt" | "appliedAt";
                sortDirection?: "ASC" | "DESC";
                page?: number;
                limit?: number;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobApplicationWithRelations"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    countJobApplicants: {
        parameters: {
            query?: {
                status?: "PENDING" | "APPROVED" | "REJECTED" | "CANCELLED" | "COMPLETED";
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listJobComments: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                sortBy?: "createdAt" | "updatedAt";
                sortDirection?: "ASC" | "DESC";
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobCommentWithRelations"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createJobComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description Create comment */
        requestBody: {
            content: {
                "application/json": {
                    content: string;
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobCommentWithRelations"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    countJobComments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteJobComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                commentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobComment"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    revokeJobApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                applicationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        jobId: string;
                        applicantId: string;
                        /** @enum {string} */
                        status: "PENDING" | "APPROVED" | "REJECTED" | "CANCELLED" | "COMPLETED";
                        appliedAt: string | null;
                        createdAt: string;
                        updatedAt: string;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    applyJob: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Apply to a job */
        requestBody: {
            content: {
                "application/json": {
                    jobId: string;
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        jobId: string;
                        applicantId: string;
                        /** @enum {string} */
                        status: "PENDING" | "APPROVED" | "REJECTED" | "CANCELLED" | "COMPLETED";
                        appliedAt: string | null;
                        createdAt: string;
                        updatedAt: string;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    cancelJobApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description Cancel a job application */
        requestBody?: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    status?: "PENDING" | "APPROVED" | "REJECTED" | "CANCELLED" | "COMPLETED";
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        jobId: string;
                        applicantId: string;
                        /** @enum {string} */
                        status: "PENDING" | "APPROVED" | "REJECTED" | "CANCELLED" | "COMPLETED";
                        appliedAt: string | null;
                        createdAt: string;
                        updatedAt: string;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateJobApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description ADMIN - Update a job application */
        requestBody?: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    status?: "PENDING" | "APPROVED" | "REJECTED" | "CANCELLED" | "COMPLETED";
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        jobId: string;
                        applicantId: string;
                        /** @enum {string} */
                        status: "PENDING" | "APPROVED" | "REJECTED" | "CANCELLED" | "COMPLETED";
                        appliedAt: string | null;
                        createdAt: string;
                        updatedAt: string;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findManySellers: {
        parameters: {
            query?: {
                keyword?: string;
                productCountMin?: number;
                productCountMax?: number;
                scoreMin?: number;
                scoreMax?: number;
                ids?: string[];
                codes?: string[];
                sortBy?: "name" | "code" | "productCount" | "score" | "createdAt" | "updatedAt";
                sortDirection?: "ASC" | "DESC";
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Seller"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    countSellers: {
        parameters: {
            query?: {
                keyword?: string;
                productCountMin?: number;
                productCountMax?: number;
                scoreMin?: number;
                scoreMax?: number;
                ids?: string[];
                codes?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findManyShortLinks: {
        parameters: {
            query?: {
                slug?: string;
                slugs?: string[];
                title?: string;
                targetUrl?: string;
                adsUrl?: string;
                userId?: string;
                userIds?: string[];
                sortBy?: "slug" | "title" | "targetUrl" | "adsUrl" | "createdAt" | "updatedAt";
                sortDirection?: "ASC" | "DESC";
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShortLinkWithRelations"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createShortLink: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ShortLinkCreateInput"];
            };
        };
        responses: {
            /** @description Default Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShortLink"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getShortLinkBySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShortLinkWithRelations"] | null;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateShortLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ShortLinkUpdate"];
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShortLink"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteShortLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    countShortLinks: {
        parameters: {
            query?: {
                slug?: string;
                slugs?: string[];
                title?: string;
                targetUrl?: string;
                adsUrl?: string;
                userId?: string;
                userIds?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    dailyCheckin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        userId: string;
                        checkinDate: string;
                        rewardPoints: number;
                        createdAt: string;
                        updatedAt: string;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listDailyCheckins: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        userId: string;
                        checkinDate: string;
                        rewardPoints: number;
                        createdAt: string;
                        updatedAt: string;
                    }[];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getMyReward: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        userId: string;
                        totalPoints: number;
                        updatedAt: string;
                    };
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findManyBlogs: {
        parameters: {
            query?: {
                userId?: string;
                status?: "DRAFT" | "PUBLISHED";
                title?: string;
                tagIds?: string[];
                sortBy?: components["schemas"]["BlogSortField"];
                sortDirection?: "ASC" | "DESC";
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlogWithRelations"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createBlog: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Create blog */
        requestBody: {
            content: {
                "application/json": {
                    title: string;
                    image?: string | null;
                    content: string;
                    /** @enum {string} */
                    status?: "DRAFT" | "PUBLISHED";
                    /** @default [] */
                    tagIds?: string[];
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Blog"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    countBlogs: {
        parameters: {
            query?: {
                userId?: string;
                status?: "DRAFT" | "PUBLISHED";
                title?: string;
                tagIds?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getBlogById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlogWithRelations"] | null;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateBlog: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description Update blog */
        requestBody?: {
            content: {
                "application/json": {
                    title?: string;
                    image?: string | null;
                    content?: string;
                    /** @enum {string} */
                    status?: "DRAFT" | "PUBLISHED";
                    tagIds?: string[];
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Blog"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteBlog: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Blog"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listBlogComments: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlogCommentWithUser"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createBlogComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    content: string;
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlogComment"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    countBlogComments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteBlogComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                commentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlogComment"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    findManyTags: {
        parameters: {
            query?: {
                name?: string;
                type?: "blog" | "job";
                sortBy?: "name" | "createdAt" | "updatedAt";
                sortDirection?: "ASC" | "DESC";
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Create tag */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TagInsert"];
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    countTags: {
        parameters: {
            query?: {
                name?: string;
                type?: "blog" | "job";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getTagById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"] | null;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description Update tag */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TagInsert"];
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listUsers: {
        parameters: {
            query?: {
                name?: string;
                email?: string;
                tiktokUsername?: string;
                ids?: string[];
                minPendingRequestsCount?: number;
                maxPendingRequestsCount?: number;
                sortBy?: "name" | "email" | "createdAt" | "updatedAt" | "tiktokUsername" | "pendingRequestsCount";
                sortDirection?: "ASC" | "DESC";
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWithRelations"][];
                };
            };
        };
    };
    countUsers: {
        parameters: {
            query?: {
                name?: string;
                email?: string;
                tiktokUsername?: string;
                ids?: string[];
                minPendingRequestsCount?: number;
                maxPendingRequestsCount?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                };
            };
        };
        responses: {
            /** @description Default Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setTiktokInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    username: string;
                    /** Format: email */
                    email?: string;
                    zalo?: string;
                    address?: string;
                };
            };
        };
        responses: {
            /** @description Default Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    verifyTiktokUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findManyEvents: {
        parameters: {
            query?: {
                status?: "DRAFT" | "PUBLISHED";
                title?: string;
                sortBy?: components["schemas"]["EventSortField"];
                sortDirection?: "ASC" | "DESC";
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"][];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createEvent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Create event */
        requestBody: {
            content: {
                "application/json": {
                    title: string;
                    image?: string | null;
                    content: string;
                    startDate: string;
                    endDate?: string | null;
                    registrationLink?: string | null;
                    /** @enum {string} */
                    status?: "DRAFT" | "PUBLISHED";
                    location?: string | null;
                    /** @enum {string|null} */
                    eventMode?: "ONLINE" | "OFFLINE" | null;
                };
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    countEvents: {
        parameters: {
            query?: {
                status?: "DRAFT" | "PUBLISHED";
                title?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getEventById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"] | null;
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description Update event */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EventUpdate"];
            };
        };
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Default Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}

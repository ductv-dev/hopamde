variables:
  RUNNER_TAG: shared
  NPM_PROXY: https://verdaccio.tek4.vn
  BASE_REGISTRY: $HARBOR_HOST/$HARBOR_PROJECT
  SNAPSHOT_BRANCHES: '/^(dev|main)$/'
  RELEASE_BRANCHES: '/^(dev|release\/.+|changeset-release\/.+)$/'

image: registry.weebuild.io/library/gitops:latest

default:
  interruptible: true
  tags:
    - $RUNNER_TAG

workflow:
  auto_cancel:
    on_new_commit: interruptible

stages:
  - check-branch
  - prepare
  - build
  - release
  - dummy

# Rules
.if-snapshot-branch:
  rules:
    - if: $CI_COMMIT_BRANCH =~ $SNAPSHOT_BRANCHES &&
        $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
.if-merge-to-snapshot-branch:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" &&
        $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ $SNAPSHOT_BRANCHES
.if-merge-to-protected-branch:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" &&
        $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true"

# Workaround for https://gitlab.com/gitlab-org/gitlab/-/issues/334281
dummy-job:
  stage: dummy
  script:
    - echo "No real jobs were triggered, running dummy job"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  variables:
    GIT_STRATEGY: fetch
    GIT_CLEAN_FLAGS: none

# Raise error if source branch name is not match RELEASE_BRANCHES
check-merge-default-branch:
  stage: check-branch
  variables:
    GIT_STRATEGY: fetch
    GIT_CLEAN_FLAGS: none
  script:
    - echo "Only merge request from $RELEASE_BRANCHES branches are allowed to merge to $CI_DEFAULT_BRANCH"
    - exit 1
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" &&
        $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH &&
        $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME !~ $RELEASE_BRANCHES

# Build docker image
.build-docker:
  stage: build
  script:
    - build-turbo-docker

# Build check for each merge request
.build-check:
  extends:
    - .build-docker
    - .if-merge-to-snapshot-branch
# Build snapshot for each snapshot branch
.build-snapshot:
  extends:
    - .build-docker
    - .if-snapshot-branch
  variables:
    PUSH: 'true'

# Build release for each tag and push
build-release:
  extends: .build-docker
  interruptible: false
  resource_group: build-release
  variables:
    PUSH: 'true'
  rules:
    - if: $CI_COMMIT_TAG

# Install workspace dependencies only
.install-workspace-deps:
  before_script:
    - npm config set registry $NPM_PROXY
    - pnpm i -w -D --frozen-lockfile

# Comment changesets for each merge request
changesets-comment:
  stage: prepare
  extends:
    - .install-workspace-deps
    - .if-merge-to-protected-branch
  script:
    - pnpm changesets-gitlab comment

# Run release for each merge request to default branch
release:
  stage: release
  extends:
    - .install-workspace-deps
  interruptible: false
  resource_group: release
  variables:
    INPUT_PUBLISH: pnpm release
  script:
    - pnpm changesets-gitlab
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

### Check lint, format, types
check:
  stage: prepare
  extends: .if-merge-to-snapshot-branch
  before_script:
    - npm config set registry $NPM_PROXY
    - pnpm i --frozen-lockfile
  script:
    - task -p check-format check-lint check-types

################################################################################################
### Custom for each app
################################################################################################
### Build check for each merge request
admin-build-check:
  extends: .build-check
  variables:
    APP_NAME: admin
creator-build-check:
  extends: .build-check
  variables:
    APP_NAME: creator

### Build snapshot for each protected branch and push
admin-build-snapshot:
  extends: .build-snapshot
  variables:
    APP_NAME: admin
creator-build-snapshot:
  extends: .build-snapshot
  variables:
    APP_NAME: creator
